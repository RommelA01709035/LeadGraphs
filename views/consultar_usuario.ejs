
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultar usuarios</title>
    <!-- Enlace a Bulma CDN -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <script src="https://kit.fontawesome.com/ec8ea11f65.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/css/estilos.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <style>
        /* Estilo personalizado para la sombra de la tabla */
        .table-shadow {
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); /* Ajusta los valores según prefieras */
            border: #6949f6;
        }

        .has-background-danger td {
            color: white; /* Hace que el texto sea blanco */
        }

        
        .has-background-danger {
            border: 2px solid #000000; /* Cambia el color del borde según tu preferencia */
        }

        .table-shadow td,
        .table-shadow th {
            border-right: 2px solid #000000; /* Color del borde vertical */
        }


        /* Estilo personalizado para cambiar el color de los botones */
        .custom-button {
            background-color: #F649D0;
            color: white;
            transition: background-color 0.3s ease; /* Transición suave del color de fondo */
        }

        /* Cambia el color de fondo cuando se pasa el cursor sobre el botón */
        .custom-button:hover {
            background-color: #F8C9EE; /* Cambia el color a un tono más claro */
            color: white;
        }

            /* Establecer una altura fija para el cuerpo de la tabla */
        .table-body {
            max-height: 700px; /* Establece aquí la altura máxima deseada */
            overflow-y: auto; /* Agrega scroll vertical si el contenido excede la altura */
        }

        .notification-container {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000; 
        }

        .control {
            border: 2px solid #000000; /* Color del contorno (rojo en este caso) */
            border-radius: 5px; /* Ajusta el radio de borde según sea necesario */
        }
    </style>
</head>

<body>
    <%- include('includes/naveside.ejs') %>
        <div class="main-content">
            <div class="columns">
                <section class="section">
                    <div class="container">
                        <div class="notification-container">
                            <% if (message) { %>
                                <div class="notification is-success">
                                    <%= message %>
                                </div>
                            <% } %>
                        </div>
                        <h1 class="title">Consultar Usuarios</h1>

                        <div class="is-flex" style="justify-content: space-between;">
                            <!-- Barra de búsqueda -->
                            <div class="control">
                                <input id="buscar" class="input is-info" type="text" placeholder="Buscar..."/>
                            </div>

                        </div>
                        <br><br>
                        
                        <!-- Contenedor para mostrar los resultados de la búsqueda -->
                        <input type="hidden" id="_csrf" name="_csrf" value="<%= csrfToken %>" >
                        <div id="respuesta_ajax" class="table-body">
                            <% if (usuarios.length < 1) { %>
                                <!-- Mensaje si no se encuentran usuarios -->
                                <div class="notification is-info">
                                    <button class="delete"></button>
                                    No se encontraron usuarios.            
                                </div>
                            <% } else { %>
                                <!-- Contenedor para los usuarios encontrados -->
                            
                                <table class="table is-fullwidth is-hoverable">
                                    <thead>
                                        <tr>
                                            <th>Nombre</th>
                                            <th>Correo</th>
                                            <th>Teléfono</th>
                                            <th>ID</th>
                                            <th class="is-narrow">Acciones</th> 
        
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% for (let usuario of usuarios) { %>
                                            <tr>
                                                <td><%= usuario.nombre_usuario %></td>
                                                <td><%= usuario.Correo %></td>
                                                <td><%= usuario.Celular %></td>
                                                <td><%= usuario.IDUsuario %></td>        
                                                <td>
                                                    <div class="buttons">
                                                        <% if (usuario) { %>

                                                            <a href="/usuarios/modificar-usuario/<%= usuario.IDUsuario %>" class="button is-info">Modificar usuario</a>
                                                            
                                                        <% } else { %>
                                                            <p>usuario no encontrado</p>
                                                        <% } %>
                                                        <button class="button is-danger" onclick="desactivarUsuario('<%= usuario.IDUsuario %>','<%= csrfToken %>' ,'<%= usuario.nombre_usuario %>')">Desactivar usuario</button>

                                                    </div>
                                                </td>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            <% } %>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>

    <!-- Script para la solicitud AJAX -->
    <script>
        const buscarUsuarios = () => {
            const valor_busqueda = document.getElementById('buscar').value;

            // Realizar la solicitud AJAX
            fetch(`/usuarios/buscar/${encodeURIComponent(valor_busqueda)}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then((result) => {
                return result.json(); // Convertir la respuesta a JSON
            }).then((data) => {
                // Procesar la respuesta y actualizar el DOM
                const respuestaHtml = data.map(usuario => `
                    <tr>
                        <td> ${usuario.nombre_usuario}</td>
                        <td> ${usuario.Correo}</td>
                        <td> ${usuario.Celular}</td>
                        <td> ${usuario.IDUsuario} </td>
                              
                        <td>
                            <!-- Botones de acción -->
                            <a href="/usuarios/modificar-usuario/${usuario.IDUsuario}" class="button is-info">Modificar usuario</a>

                            <button class="button is-danger mt-2" onclick="desactivarUsuario('${usuario.IDUsuario}')">Desactivar usuario</button>
                        </td>
                    </tr>`).join('');
                document.getElementById('respuesta_ajax').innerHTML = `
                    <table class="table is-fullwidth is-hoverable">
                        <thead>
                            <tr>
                                <th>Nombre</th>                                    
                                <th>Correo</th>
                                <th>Teléfono</th>
                                <th>ID</th>
                                <th class="is-narrow">Acciones</th> 
                            </tr>
                        </thead>
                        <tbody>
                            ${respuestaHtml}
                        </tbody>
                    </table>`;
            }).catch(err => {
                console.log(err);
            });
        };

    document.getElementById('buscar').addEventListener('input', buscarUsuarios);
    </script>
    
    <script>
        function confirmDelete(IDUsuario) {
            Swal.fire({
                title: "¿Estás seguro?",
                text: "¡No podrás revertir esto!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Sí, eliminarlo"
            }).then((result) => {
                if (result.isConfirmed) {
                    //document.getElementById("deleteForm_" + IDUsuario).submit();
                    console.log('Eliminar usuario ha sido seleccionado');
                    console.log('usuario a eliminar', IDUsuario);
                    eliminar(IDUsuario);
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const notifications = document.querySelectorAll('.notification');

            notifications.forEach(notification => {
                const closeButton = notification.querySelector('.delete');

                closeButton.addEventListener('click', function () {
                    notification.remove(); 
                });

                setTimeout(function () {
                    notification.remove(); 
                }, 5000);
            });
        });

        const eliminar = (IDUsuario) => {
            console.log('usuario a eliminar', IDUsuario);

            const csrf = document.getElementById('_csrf').value;
            const valor_busqueda = document.getElementById('buscar').value;

            // Realizar la solicitud de eliminacion de usuario
            fetch('/usuarios/desactivar', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'csrf-token': csrf
                },
                body: JSON.stringify({IDUsuario: IDUsuario}) // Para enviar JSON al body
            }).then(result => {

                return result.json();
            }).then(data => {
                console.log("Desactivar usuario" + IDUsuario)
                console.log(data);
                // Procesar la respuesta y actualizar el DOM
                const respuestaHtml = data.usuarios.map(usuario => `
                    <tr>
                        <td> ${usuario.nombre_usuario}</td>
                        <td> ${usuario.Correo}</td>
                        <td> ${usuario.Celular}</td>
                        <td> ${usuario.IDUsuario} </td>
                              
                        <td>
                            <!-- Botones de acción -->
                            <a href="/usuarios/modificar-usuario/${usuario.IDUsuario}" class="button is-info">Modificar usuario</a>
                            <button class="button is-danger" onclick="desactivarUsuario('${usuario.IDUsuario}')">Eliminar usuario</button>
                        </td>
                    </tr>`).join('');
                document.getElementById('respuesta_ajax').innerHTML = `
                    <table class="table is-fullwidth is-hoverable">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Correo</th>
                                <th>Teléfono</th>
                                <th>ID</th>
                                <th class="is-narrow">Acciones</th> 
                            </tr>
                        </thead>
                        <tbody>
                            ${respuestaHtml}
                        </tbody>
                    </table>`;

                // Volver a realizar la búsqueda con el término almacenado
                buscarUsuarios();

                // Mostrar el mensaje si está presente
                if (data.message) {
                    const notificationContainer = document.querySelector('.notification-container');
                    const notification = document.createElement('div');
                    notification.classList.add('notification', 'is-success');
                    notification.innerHTML = `
                        ${data.message}
                        <button class="delete"></button>`;
                    notificationContainer.appendChild(notification);

                    // Eliminar la notificación después de un tiempo
                    setTimeout(() => {
                        notification.remove();
                    }, 5000);
                }

                if(data.error) {
                    const notificationContainer = document.querySelector('.notification-container');
                    const notification = document.createElement('div');
                    notification.classList.add('notification', 'is-danger');
                    notification.innerHTML = `
                        ${data.error}
                        <button class="delete"></button>`;
                    notificationContainer.appendChild(notification);

                    // Eliminar la notificación después de un tiempo
                    setTimeout(() => {
                        notification.remove();
                    }, 5000);
                }
            }).catch(err => {
                console.log(err);
            });
        }
        const desactivarUsuario = (usuarioId, csrfToken, nombreUsuario) => {
    console.log('Intentando desactivar usuario con ID:', usuarioId);

    fetch(`/usuarios/desactivar/${usuarioId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'csrf-token': csrfToken
        }
    }).then((response) => {
        if (response.ok) {
            console.log('Usuario desactivado exitosamente');
            // Actualizar la interfaz de usuario si es necesario
        } else {
            console.error('Error al desactivar usuario');
            // Manejar errores si es necesario
        }
    }).catch((error) => {
        console.error('Error de red:', error);
        // Manejar errores de red si es necesario
    });
};


// Función para actualizar la interfaz de usuario después de desactivar un usuario
const actualizarInterfazUsuarioDesactivado = (usuarioId) => {
    // Obtener la fila correspondiente al usuario desactivado
    const filaUsuario = document.querySelector(`tr[data-id="${usuarioId}"]`);

    if (filaUsuario) {
        // Cambiar el color de fondo de la fila
        filaUsuario.classList.add('has-background-danger');
        
        // Deshabilitar el botón de desactivar
        const botonDesactivar = filaUsuario.querySelector('.desactivar-button');
        if (botonDesactivar) {
            botonDesactivar.disabled = true;
        }
        
        // Opcionalmente, podrías cambiar el texto del botón o realizar otras actualizaciones según tus necesidades
    }
};

// Función para reactivar un usuario
const reactivarUsuario = (usuarioId) => {
    fetch(`/usuarios/reactivar/${usuarioId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    }).then((response) => {
        if (response.ok) {
            console.log('Usuario reactivado exitosamente');
            // Actualizar la interfaz de usuario si es necesario
        } else {
            console.error('Error al reactivar usuario');
            // Manejar errores si es necesario
        }
    }).catch((error) => {
        console.error('Error de red:', error);
        // Manejar errores de red si es necesario
    });
};

// Función para actualizar la tabla de usuarios con los datos proporcionados
const actualizarTablaUsuarios = (data) => {
    const usuarios = data.usuarios;
    const message = data.message;

    const tableBody = document.getElementById('respuesta_ajax');

    // Construir el HTML de la tabla de usuarios
    const html = usuarios.map(usuario => `
        <tr>
            <td>${usuario.nombre_usuario}</td>
            <td>${usuario.Correo}</td>
            <td>${usuario.Celular}</td>
            <td>${usuario.IDUsuario}</td>
            <td>
                <a href="/usuarios/modificar-usuario/${usuario.IDUsuario}" class="button is-info">Modificar usuario</a>
                <button class="button is-danger" onclick="confirmDelete(${usuario.IDUsuario})">Eliminar usuario</button>
            </td>
        </tr>`
    ).join('');

    // Actualizar el contenido de la tabla de usuarios
    tableBody.innerHTML = html;

    // Mostrar mensaje si está presente
    if (message) {
        mostrarMensaje(message, 'success');
    }
};

// Función para mostrar mensajes
const mostrarMensaje = (message, type) => {
    const notificationContainer = document.querySelector('.notification-container');
    const notification = document.createElement('div');
    notification.classList.add('notification');

    if (type === 'success') {
        notification.classList.add('is-success');
    } else if (type === 'error') {
        notification.classList.add('is-danger');
    }

    notification.innerHTML = `
        ${message}
        <button class="delete"></button>`;

    notificationContainer.appendChild(notification);

    // Eliminar la notificación después de un tiempo
    setTimeout(() => {
        notification.remove();
    }, 5000);
};

// Asignar eventos a los botones de eliminar y reactivar usuarios
document.addEventListener('DOMContentLoaded', () => {
    const deleteButtons = document.querySelectorAll('.delete-user');
    deleteButtons.forEach(button => {
        button.addEventListener('click', () => {
            const IDUsuario = button.dataset.userid;
            confirmDelete(IDUsuario);
        });
    });

    const reactivateButtons = document.querySelectorAll('.reactivate-user');
    reactivateButtons.forEach(button => {
        button.addEventListener('click', () => {
            const IDUsuario = button.dataset.userid;
            reactivarUsuario(IDUsuario);
        });
    });
});

    </script>
</body>
</html>
