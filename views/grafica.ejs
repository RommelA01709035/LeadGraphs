<%- include('includes/head.ejs') %>
<%- include('includes/naveside.ejs') %>

<style>
    #grafica-container {
        max-width: 100%; /* Ajusta el ancho máximo según sea necesario */
        margin: auto; /* Centra el contenedor horizontalmente */
    }


    .canvas-container {
        position: relative;
        width: 100%;
        height: auto;
    }

    .canvas-container canvas {
        max-width: 100%;
        height: auto;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .remove-button {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 5px 10px;
        background-color: #ff6f61;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .container {
        margin: auto; /* Centra horizontalmente el contenido */
        max-width: 960px; /* Ajusta este valor según sea necesario */
    }

    .box canvas {
        width: 100%; /* Ajusta el ancho del canvas al 100% del contenedor */
        height: auto; /* Permita que la altura se ajuste automáticamente */
    }

    
        
    /* Oculta los elementos que no quieres imprimir */
    @media print {
        .hide-before-print {
        display: none !important;
        }
        .show-during-print {
            display: block !important; /* Usamos !important para asegurarnos de que los estilos se apliquen durante la impresión */
        }
    }
        
    @media print {
    #myChart {
        margin: 0;
        padding: 0;
        transform: translateX(-20%);
    }
}

</style>

<div class="container mt-4 ml-8">
    <div class="box">
        <nav class="level is-mobile">
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Average</p>
                    <p class="title"><%= Math.trunc(average.map(entry => entry.promedio)); %></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Max</p>
                    <p class="title"><%= maximo.map(entry => entry.maximo); %></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Minimum</p>
                    <p class="title"><%= minimo.map(entry => entry.minimo); %></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Número de leads en el estudio</p>
                    <p class="title"><%= registers.map(entry => entry.total_tuplas); %></p>
                </div>
            </div>        
        </nav>
        
        <div class="container2 mt-5">
            <h2 class="title is-2 has-text-centered"><%= titulo_grafica %></h2> 
          
            
            <div id="legendContainer"></div>

            <div class="columns is-centered">
                <div class="column is-8">
                    <div class="box grafica">
                        <div class="container2">
                            <canvas class="is-centered" id="myChart"></canvas>
                        </div>
                    </div>
                    <% if (caso === "LastMessage") { %>
                        <div class="box mt-3">
                            <p>Mensajes encontrados:</p>
                            <div><%= values = data.map(entry => entry.cantidad_mensajes); %></div>
                        </div>
                    <% } %>
                    <div class=" is-2 has-text-centered is-fullwidth mt-3 no-imprimir">
                        <div class="box no-imprimir">
                            <div class="buttons is-centered"> 
                                <button class="button is-info is-medium is-fullwidth" onclick="setChartMode('point')">Ver valor de cada serie de datos en la gráfica</button> 
                                <button class="button is-info is-medium is-fullwidth" onclick="setChartMode('dataset')">Ver todas las series de datos en la gráfica</button> 
                            </div>
                        </div>
                    </div>
                    <div class=" is-2 has-text-centered  mt-3 no-imprimir">
                        <div class="box no-imprimir">
                            <div class="buttons is-centered"> 
                                <a href="/crea-grafica" class="button is-info is-medium mt-2 is-fullwidth">Crear nueva gráfica</a> 
                                <button onclick="window.print()" class="button is-info is-medium mt-2 is-fullwidth">Imprimir</button> 
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

    
    <script>
        const data = JSON.parse('<%- JSON.stringify(data) %>');
        const opcion = JSON.parse('<%- JSON.stringify(opcion) %>');
        let labels;
        let values;

        
    
        <% if(caso === "leadsPorMes") { %>
            
            labels = data.map(entry => `${getMonthName(entry.mes)} - ${entry.cantidad_leads} Leads - ${entry.estado_lead}`);
            values = data.map(entry => entry.cantidad_leads);
        <% } else if(caso == "LastMessage"){%>
            labels = data.map(entry => `${entry.cantidad_mensajes} Leads - Mensaje: ${entry.palabra}          `);
            values = data.map(entry => entry.cantidad_mensajes);
        <% } else if(caso == "PerCompany"){%>
            labels = data.map(entry => `${entry.cantidad_leads} Leads - ${entry.Compania}          `);
            values = data.map(entry => entry.cantidad_leads);
        <%}%>
        
    
        const chartData = {
            labels: labels,
            datasets: [{
                data: values,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        };
        const chartOptions = {
        bar: {
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        font: {
                            size: 16
                        }
                    }
                },
                x: {
                    ticks: {
                        font: {
                            size: 16
                        }
                    }
                }
            },
            plugins: {
                legend: false 
            }
            
        },
        pie: {
            plugins: {
                legend: {
                    labels: 
                    {
                        font: {
                            size: 16
                        }
                    }
                }
            }
        }
    };

    const optionsForType = chartOptions[opcion];


    const config = {
    type: opcion,
    data: chartData,
    options: {
        interaction: {
            intersect: false,
            mode: 'index',
        },
        plugins: {
            legend: {
                display: (opcion !== 'bar'), 
                labels: {
                    font: {
                        size: 16
                    }
                }
            }
        }
    }
};

        var myChart = new Chart(
            document.getElementById('myChart'),
            config
        );

        // Convertir el número del mes a su nombre correspondiente
        function getMonthName(monthNumber) {
            const months = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];
            return months[monthNumber - 1]; // Restamos 1 porque los meses en JavaScript van de 0 a 11
        }

        // Append '4d' to the colors (alpha channel), except for the hovered index
        function handleHover(evt, item, legend) {
            legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
                colors[index] = index === item.index || color.length === 9 ? color : color + '4D';
            });
            legend.chart.update();
        }

        // Removes the alpha channel from background colors
        function handleLeave(evt, item, legend) {
            legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
                colors[index] = color.length === 9 ? color.slice(0, -2) : color;
            });
            legend.chart.update();
        }

        function setChartMode(mode) {
            const modes = {
                'point': 'point',
                'dataset': 'dataset',
            };

            // Verifica si el modo seleccionado es válido
            if (modes[mode]) {

                // Actualiza el modo del gráfico
                myChart.options.interaction.mode = modes[mode];

                // Actualiza el gráfico
                myChart.update();
            } else {
                console.error('Modo de gráfico no válido');
            }
        }


        function handlePostPrint(event) {

            // Muestra los elementos ocultos para imprimir
            var noImprimirElementos = document.querySelectorAll('.no-visible');
            noImprimirElementos.forEach(function(elemento) {
                elemento.style.display = 'block';
            });
            
            // Inicia el proceso de impresión después de hacer los ajustes necesarios
            window.print();
        }



        function handlePrePrint(event) {

            // Oculta o modifica elementos que no deseas imprimir
            var noImprimirElementos = document.querySelectorAll('.no-imprimir');
            noImprimirElementos.forEach(function(elemento) {
                elemento.style.display = 'none';
            });
            
            // Agrega un listener para el evento de cancelación de la impresión
            window.onafterprint = function() {
                // Restaura los estilos o muestra nuevamente los elementos ocultos
                noImprimirElementos.forEach(function(elemento) {
                elemento.style.display = 'block'; // o el display original
                });
            };
            
            // Inicia el proceso de impresión después de hacer los ajustes necesarios
            window.print();
            }

            // Agrega un listener para el evento de impresión
            window.onbeforeprint = handlePrePrint;

            // Agrega un listener para el evento de impresión
            window.onafterprint = handlePostPrint;
    </script>
    
</body>
</html>