<%- include('includes/head.ejs') %>
<%- include('includes/naveside.ejs') %>

<style>
    #grafica-container {
        max-width: 400px; 
        margin: auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    .canvas-container {
        position: relative;
        width: 100%;
        height: auto;
    }

    .canvas-container canvas {
        max-width: 100%;
        height: auto;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .remove-button {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 5px 10px;
        background-color: #ff6f61;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .box {
        max-width: 1000px; /* Aumenta el ancho del contenedor */
        margin: auto;
    }

    .box canvas {
        width: 100%; /* Ajusta el ancho del canvas al 100% del contenedor */
        height: auto; /* Permita que la altura se ajuste automáticamente */
    }


    
</style>

<div class="container mt-4 ml-8">
    <div class="box ">
        <nav class="level is-mobile">
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Average</p>
                    <p class="title"><%= _Average = Math.trunc(average.map(entry => entry.promedio)); %></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Max</p>
                    <p class="title"><%= _Max = maximo.map(entry => entry.maximo); %></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Mininum</p>
                    <p class="title"><%= _Min = minimo.map(entry => entry.minimo); %></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Numero de leads en el estudio</p>
                    <p class="title"><%= _Count = registers.map(entry => entry.total_tuplas); %></p>
                </div>
            </div>        
        </nav>
        
<div class="container mt-5 ">
    <h2 class="title is-2 has-text-centered"><%= titulo%></h2> 
    <div class="columns is-centered">
        <div class="column is-8">
            <div class="box">
                <canvas id="myChart"></canvas>
            </div>
            <% if (caso === "LastMessage") { %>
                <div class="box mt-3">
                    <p>Mensajes encontrados:</p>
                    <div><%= values = data.map(entry => entry.cantidad_mensajes); %></div>
                </div>
            <% } %>
        </div>
    </div>

    <div class="columns is-centered mt-3">
        <div class="column is-half">
            <div class="box">
                <div class="columns is-mobile">
                    <div class="column">
                        <a href="/crea-grafica" class="button is-info is-fullwidth mt-2">Crear Gráfica</a>
                    </div>
                   
                </div>
            </div>
        </div>
    </div>
</div>

    </div>
</div>




    
    
    <script>
        const data = JSON.parse('<%- JSON.stringify(data) %>');
        const opcion = JSON.parse('<%- JSON.stringify(opcion) %>');
        let labels;
        let values;
    
        <% if(caso === "leadsPorMes") { %>
            
            labels = data.map(entry => `${entry.mes}-${entry.cantidad_leads} - ${entry.estado_lead}`);
            values = data.map(entry => entry.cantidad_leads);
        <% } else if(caso == "LastMessage"){%>
            labels = data.map(entry => `${entry.cantidad_mensajes}-${entry.palabra}`);
            values = data.map(entry => entry.cantidad_mensajes);
        <% } else if(caso == "PerCompany"){%>
            labels = data.map(entry => `${entry.cantidad_leads}-${entry.Compania}`);
            values = data.map(entry => entry.cantidad_leads);
        <%}%>
        
    
        const chartData = {
            labels: labels,
            datasets: [{
                label: labels,
                data: values,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        };
        const chartOptions = {
        bar: {
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        font: {
                            size: 16 
                        }
                    }
                },
                x: {
                    ticks: {
                        font: {
                            size: 16
                        }
                    }
                }
            },
            plugins: {
                legend: false
            }
        },
        pie: {
            plugins: {
                legend: {
                    labels: 
                    {
                        font: {
                            size: 16
                        }
                    }
                }
            }
        }
    };

    const optionsForType = chartOptions[opcion];

    const config = {
        type: opcion,
        data: chartData,
        options: {
            ...optionsForType, 
            tooltips: {
                enabled: false
            }
        },
    };
        var myChart = new Chart(
            document.getElementById('myChart'),
            config
        );

        function downloadChart() {
            const base64Image = myChart.toBase64Image('image/jpeg', 1.0);
            const timestamp = new Date().getTime();
            const filename = 'grafica_' + timestamp + '.jpg';
            const link = document.createElement('a');
            link.href = base64Image;
            link.download = filename;
            link.click();
        }
    </script>
    
</body>
</html>